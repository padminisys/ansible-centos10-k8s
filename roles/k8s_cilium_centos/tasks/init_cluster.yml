---
# Check if kubeadm is already initialized
- name: Check cluster initialization
  ansible.builtin.stat:
    path: /etc/kubernetes/admin.conf
  register: k8s_admin_conf

# Pull required Kubernetes container images (only if not initialized)
- name: Pull required k8s container images
  ansible.builtin.command: kubeadm config images pull --cri-socket unix:///var/run/crio/crio.sock
  changed_when: false
  when: not k8s_admin_conf.stat.exists

# Initialize control-plane (single node)
- name: Initialize control-plane (single node)
  ansible.builtin.command: kubeadm init --cri-socket=unix:///var/run/crio/crio.sock
  args:
    creates: /etc/kubernetes/admin.conf
  register: kubeadm_init
  when: not k8s_admin_conf.stat.exists

# Ensure .kube directory exists for root
- name: Ensure .kube directory exists for root
  ansible.builtin.file:
    path: /root/.kube
    state: directory
    owner: root
    group: root
    mode: '0755'

# Copy kubeconfig for root
- name: Copy kubeconfig for root
  ansible.builtin.copy:
    src: /etc/kubernetes/admin.conf
    dest: /root/.kube/config
    owner: root
    group: root
    mode: '0600'
    remote_src: yes

# Ensure .kube directory exists for sudo user (if any)
- name: Ensure .kube directory exists for sudo user (if any)
  ansible.builtin.file:
    path: "/home/{{ ansible_env.SUDO_USER }}/.kube"
    state: directory
    owner: "{{ ansible_env.SUDO_UID | int }}"
    group: "{{ ansible_env.SUDO_GID | int }}"
    mode: '0755'
  when: ansible_env.SUDO_USER is defined

# Copy kubeconfig for sudo user (if any)
- name: Copy kubeconfig for sudo user (if any)
  ansible.builtin.copy:
    src: /etc/kubernetes/admin.conf
    dest: "/home/{{ ansible_env.SUDO_USER }}/.kube/config"
    owner: "{{ ansible_env.SUDO_UID | int }}"
    group: "{{ ansible_env.SUDO_GID | int }}"
    mode: '0600'
    remote_src: yes
  when: ansible_env.SUDO_USER is defined




# ---
# # (check if kubeadm is already initialized)
# - name: Check cluster initialization
#   ansible.builtin.stat:
#     path: /etc/kubernetes/admin.conf
#   register: k8s_admin_conf

# - name: Pull required k8s container images
#   ansible.builtin.command: kubeadm config images pull --cri-socket unix:///var/run/crio/crio.sock
#   changed_when: false
#   when: not k8s_admin_conf.stat.exists

# - name: Initialize control-plane (single node)
#   ansible.builtin.command: kubeadm init --cri-socket=unix:///var/run/crio/crio.sock
#   args:
#     creates: /etc/kubernetes/admin.conf
#   register: kubeadm_init
#   when: not k8s_admin_conf.stat.exists

# - name: Create .kube config for root
#   ansible.builtin.copy:
#     src: /etc/kubernetes/admin.conf
#     dest: /root/.kube/config
#     owner: root
#     group: root
#     mode: 0600
#     remote_src: yes
#   when: k8s_admin_conf.stat.exists

# - name: Create .kube config for invoking user (if sudo)
#   ansible.builtin.user:
#     name: "{{ ansible_env.SUDO_USER | default(ansible_user_id, true) }}"
#     state: present
#   when:
#     - ansible_env.SUDO_USER is defined

# - name: Copy kubeconfig for sudo user (if any)
#   ansible.builtin.copy:
#     src: /etc/kubernetes/admin.conf
#     dest: "/home/{{ ansible_env.SUDO_USER }}/.kube/config"
#     owner: "{{ ansible_env.SUDO_UID | int }}"
#     group: "{{ ansible_env.SUDO_GID | int }}"
#     mode: 0600
#     remote_src: yes
#   when:
#     - ansible_env.SUDO_USER is defined
#     - k8s_admin_conf.stat.exists
#   ignore_errors: true
